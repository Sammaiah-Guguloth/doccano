ARG PYTHON_VERSION="3.8.13-slim-bullseye"
ARG NODE_VERSION="18.20-bullseye-slim"

# Frontend build stage
FROM node:${NODE_VERSION} AS frontend-builder

COPY frontend/ /frontend/
WORKDIR /frontend
ENV PUBLIC_PATH="/static/_nuxt/"

# Install dependencies and build frontend
RUN apt-get update \
 && apt-get install -y --no-install-recommends git python3 make g++ ca-certificates \
 && git config --global url."https://github.com/".insteadOf git://github.com/ \
 && yarn install --network-timeout 1000000 \
 && yarn build \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

# Backend build stage
FROM python:${PYTHON_VERSION} AS backend-builder

# Install system dependencies
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
    libpq-dev=13.* \
    unixodbc-dev=2.* \
    g++=4:* \
    libssl-dev=1.* \
    curl \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /tmp

# Copy pyproject.toml and poetry.lock for dependency installation
COPY backend/pyproject.toml backend/poetry.lock* /tmp/

# Install Python dependencies
RUN pip install -U --no-cache-dir pip==22.2.2 \
 && pip install --no-cache-dir poetry==1.4.2 \
 && poetry config virtualenvs.create false \
 && poetry install --only=main --no-dev --no-interaction --no-ansi \
 && pip uninstall -y poetry \
 && pip install --no-cache-dir psycopg2-binary==2.8.6

# Runtime stage
FROM python:${PYTHON_VERSION} AS runtime

# Install runtime dependencies
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
    libpq-dev=13.* \
    unixodbc-dev=2.* \
    libssl-dev=1.* \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

# Create user
RUN useradd -ms /bin/sh doccano

# Copy Python packages from builder
COPY --from=backend-builder /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages
COPY --from=backend-builder /usr/local/bin /usr/local/bin

# Copy application code
COPY --chown=doccano:doccano . /doccano
WORKDIR /doccano/backend

# Copy frontend build
COPY --from=frontend-builder /frontend/dist /doccano/backend/client/dist

# Set environment variables for collectstatic
ENV DJANGO_SETTINGS_MODULE="config.settings.production"
ENV SECRET_KEY="dummy-key-for-collectstatic"
ENV DATABASE_URL="sqlite:///tmp/dummy.db"

# Collect static files
RUN python manage.py collectstatic --noinput \
 && chown -R doccano:doccano .

# Environment variables for Railway
ENV DEBUG="False"
ENV DJANGO_SETTINGS_MODULE="config.settings.production"
ENV PORT="8000"
ENV WORKERS="2"
ENV CELERY_WORKERS="2"

# Railway will provide these automatically
ENV RAILWAY_ENVIRONMENT="production"

USER doccano
EXPOSE ${PORT}

# Use Railway-optimized startup script
CMD ["/doccano/tools/railway.sh"]